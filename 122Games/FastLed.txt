@startuml

title FastLed (LedMatrix, LedStrip, FastLed)

class LedMatrix
{
  ..Initialization..
  +LedMatrix()
  +Initialize(uint8_t nrOfRows, uint8_t nrOfColumns)
  ..Status..
  +LedStrip* GetLedStrip()
  +uint8_t GetNrOfRows()
  +uint8_t GetNrOfColumns()
  ..Color..
  +FastLedCRGB GetLed(int x, int y)
  +void SetLed(int x, int y, int red, int green, int blue)
  ..Invalidation..
  +void ResetInvalidatedLeds()
  +bool IsLedInvalidated(int x, int y)
  ..Properties..
  -uint8_t _nrOfRows
  -uint8_t _nrOfColumns
}

' ----------------- Arduino classes -----------------------------

class DataPins
{
  static const int LED_STRIPS
}


class LedStrip
{
  ..Initialization..
  +LedStrip()
  +Initialize(uint8_t nrOfLeds)
  ..Status..
  +uint8_t GetDataPin() { from DataPins class }
  +FastLed* GetFastLed()
  +uint8_t GetNrOfLeds()
  ..Current..
  +void ReduceCurrent(uint8_t percentage);
  ..Color..
  +struct FastLedCRGB* GetLeds()
  +struct FastLedCRGB* GetLed(uint8_t ledIndex)
  +void SetAllLeds(LedColor::EColor color, uint8_t step)
  +void SetAllLeds(uint32_t color)
  +void SetAllLeds(uint8_t red, uint8_t green, uint8_t blue)
  +void SetLed(struct FastLedCRGB* led, LedColor::EColor color, uint8_t step)
  +void SetLed(struct FastLedCRGB* led, uint32_t color)
  +void SetLed(struct FastLedCRGB* led, uint8_t red, uint8_t green, uint8_t blue)
  ..Properties..
  -uint8_t _nrOfLeds
}

class LedColor
{
  ..Status..
  static bool IsOff(uint8_t* red, uint8_t* green, uint8_t* blue);
  static void SetRgb(uint8_t* red, uint8_t* green, uint8_t* blue, LedColor::EColor color, uint32_t step);
  static void SetRgb(uint8_t* red, uint8_t* green, uint8_t* blue, uint32_t rgb);
  static void SetRgb(uint8_t* red, uint8_t* green, uint8_t* blue, uint8_t redValue, uint8_t greenValue, uint8_t blueValue);
  static uint8_t SetBrightness(uint8_t* red, uint8_t* green, uint8_t* blue, uint8_t percentage_0, uint8_t percentage_1);
  ..Special Colors..
  static void SetRandom(uint8_t* red, uint8_t* green, uint8_t* blue);
  static void SetRainbow(uint8_t* red, uint8_t* green, uint8_t* blue, uint32_t step);
  static void SetFire(uint8_t* red, uint8_t* green, uint8_t* blue, uint32_t step);
  static void SetGalaxy(uint8_t* red, uint8_t* green, uint8_t* blue, uint32_t step);
  static void CreateNewGalaxyStar(uint8_t* red, uint8_t* green, uint8_t* blue);
}


class FastLed <<Arduino>>
{
  ..Initialization..
  +FastLed()
  +static CLEDController& addLeds(CLEDController* pLed, struct FastLedCRGB* data, int nLedsOrOffset, int nLedsIfOffset = 0)
  +template<ESPIChipsets CHIPSET, uint8_t DATA_PIN, EOrder RGB_ORDER> CLEDController& addLeds(struct FastLedCRGB* data, int nLedsOrOffset)
  ..Brightness..
  +setBrightness(uint8_t scale)
  +uint8_t getBrightness
  ..Current..
  +inline void setMaxPowerInVoltsAndMilliamps(uint8_t volts, uint32_t milliamps)
  +intline void setMaxPowerInMilliWatts(uint32_t milliwatts)
  ..Show/Clear..
  +void show(uint8_t scale)
  +void show()
  +void clear(bool writeData = false)
  +void clearData()
  +void showColor(const struct CRGB& color, uint8_t scale)
  +void showColor(const struct CRGB& color)
  ..Various..
  +void delay(unsigned long ms)
  +void setTemperature(const struct CRGB& temp)
  +void setCorrection(const struct CRGB& correcton)
  +void setDither(uint8_t ditherMode = 0)
  ..Refresh Rate..
  +void setMaxRefreshRate(uint16_t refresh, bool constrain=false)
  +void countFPS(int nFrames = 25)
  +uint16_t getFPS()
  ..Status..
  +int count()
  +CLEDController& operator[](int x)

__Stub Only Methods__
  +static struct FastLedCRGB* GetData(int ledStrip)
  +static int GetPinNumber(int ledStrip)
  +static int GetNrOfUsedLeds(int ledStrip)
  +static int GetNrOfLedStrips()
  +static bool IsShowEnabled()

--Stub Only Variables--
  -static int _pinNumbers{MAX_NR_OF_LED_STRIPS]
  -static int _nrOfUsedLeds[MAX_NR_OF_LED_STRIPS]
  -static int _nrOfLedStrips
  -static bool _showEnabled

}


class FastLedCRGB <<ArduinoStub, struct>>
{
  +uint8_t red;
  +uint8_t green;
  +uint8_t blue;
}


'-------------------- Class relations -----------------------------

LedMatrix *-- "1" LedStrip : _ledStrip
LedStrip *-- "+" FastLedCRGB : _leds
LedStrip -left-> DataPins
LedStrip -right-> LedColor
LedStrip *-> "1" FastLed:  _fastLed
FastLed *-> "*" FastLedCRGB: _data[MAX_NR_OF_LED_STRIPS]

'-------------------- Grouping -----------------------------


FastLed - FastLedCRGB

@enduml
